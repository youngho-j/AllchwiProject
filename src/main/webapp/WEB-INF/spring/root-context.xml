<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc 
	http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
	http://mybatis.org/schema/mybatis-spring 
	http://mybatis.org/schema/mybatis-spring-1.2.xsd
	http://www.springframework.org/schema/beans 
	https://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- PropertyPlaceholderConfigurer 사용하여 외부 프로퍼티 값을 빈 정의부로 가져올 수 있음-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	  	<property name="location" value="/WEB-INF/properties/config.properties"/>
        <property name="fileEncoding" value="UTF-8" />
  	</bean>
  	
  	<!-- db.properties 내용을 주입받아서 실행 -->
	<bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
    </bean> 
    
    <!-- sqlSessionFactoryBean 설정 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:com/rebuild/mybatis/config/mybatis-config.xml"/>
	</bean>
	<!-- sqlSessiontemplate 설정 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>	
	
	<!-- 메일인증관련 설정 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}" /> 
		<property name="port" value="${mail.port}" /><!-- 465 or 25 -->
		<property name="username" value="${mail.username}" />
		<property name="password" value="${mail.password}" />
		<property name="defaultEncoding" value="utf-8" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.transport.protocol">${mail.protocol}</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
				<prop key="mail.debug">true</prop>
			</props>
		</property>
	</bean>
	
	<!-- 
		web.xml에는 위와 같이 ContextLoaderListener를 사용하는 root-context.xml 과 DispatcherServlet을 이용하는 servlet-context.xml이 있다. 
		multipartFilter 적용으로 선언 위치 변경 XSS방어 설정을 안했을때는 Servlet-Context에 선언하여도 작동이 잘되었지만 filter 적용으로
		multipartResolver를 root-context.xml 쪽으로 선언해주어야 정상적으로 작동합니다. 
	 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 업로드 사이즈 설정  5242880-->
		<property name="maxUploadSize" value="-1"></property>
	</bean>
	
	<!-- 트랜잭션 관련 설정 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 트랜잭션 어노테이션 인식 -->
	<tx:annotation-driven />
	
	<context:component-scan base-package="com.rebuild.project" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
	</context:component-scan>	
</beans>
